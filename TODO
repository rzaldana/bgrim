0. POC using DEBUG trap to enrich stderr so we can fetch multi-line error messages when printing stacktraces
1. Implement pure-bash realpath function
3. Implement stack trace mode (Look at https://github.com/elibs/ebash for error-handling inspo)
  0. Implement 'int' type in bg.in.require_args function
  1. Implement __bg.err.caller function which stores same output as 'caller' builtin in array. It should take a frame number like caller
    - It should return the right source file, even for functions in sourced files
  2. Implement __bg.print_stackframe, which prints the contents of a stackframe array in a formatted way
  3 Implement __bg.print_stacktrace, which uses __bg.print_stackframe to print stacktrace starting from the given stack frame index
  4. Implement bg.err.enable_error_detection which should:
      - call unhandled_error1 on ERR signal
      - call unhandled_error2 on EXIT signal (for unset variable errors)
  5. Implement die function, which should exit gracefully with no stacktrace
4. Implement error methods:
      bg.err.message "print standardized error message and use in all functions. Should print name of function and code line"
      bg.err.exit "print error message and exit with code 1"
5. Implement more tests for cli.parse function with different specs
    Things to test:
      - mix of opts and opts with args work
      - mix of opts and args work
      - mix of opts with args and args work
      - mix of opts, opts with args and args work
6. Implement bg.cli.add_name function to change the name of the cli in the help message
7. Implement bg.cli.add_footer to add footer to help message
8. Implement bg.cli.add_header to add header to help message
9. Implement bg.cli.help_message to override auto-generated help message
10. Implement bash native replacement for basename and substitute it in bg.get_parent_routine_name
11. Implement bash native replacement for mktemp and use it in tmpfile functions
12. Rename tmpfile module to tmp
13. Add documentation to functions that don't have it
2. Revamp color output functions to be able to combine color and formattings such as italic, underline, and bold
